initilias npm
npm init
install live-server to refresh page everytime a change is made
npm install -g live-server

touch index.html
mkdir css
mkdir js
touch css/style.css
touch js/index.js

HTML Skelton
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>JavaScript Functions</title>
        <meta name="Maryam Ebrahim" content="JS Functions Snippets">
        <link rel="shortcut icon" href="favicon.ico" type="image/x-icon">
        <!-- CSS Styles -->
        <link rel="stylesheet" href="css/style.css">
        <!-- FontAwesome Style from CDN -->
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" crossorigin="anonymous">
    </head>
    <body>
        <h1>JavaScript :)</h1>
        <script src="js/index.js" >
        </script>
    </body>
</html>


Functions
reverseString Function that reverses a string 
by passing a string as an argument and it will reverse it
Process Steps:
- think about the functions variables and parameters or lets say 
the ingrediants of the receipe 
    - one parameter, a variable 
        reverseMe which will be used to store the string 
        (in this case the string John)
    - one variable called reversed that will contain
        the final string with all the charachters in reverse order
How it will function
    - it will loop over the reverseMe string from back to front
    - adds each charachter in that order to the reversed variable
    - Finally, it returns the result, so we can print it using console.log

all these steps are wrapped inside this reverseString Function 

** using a function simplifies the process by wrapping all this code
    together and generalizing the process for all strings.
    it allows you to use and then even reuse the function by
    just calling it by its name and passing in a different string each time

    function reverseString(reverseMe) {
        var reversed = "";
        for (var i = reverseMe.length -1 ; i >= 0; i--) {
            reversed += reverseMe[i];
        }
        return reversed;
    }

    console.log("HI" + reverseString("John") + "!");

How to declare a function
reheatPizza() have one parameter: the number of slices

function reheatPizza(numSlice){
    //code that figures out reheat settings
}
If you tried pasting any of the functions above into the JavaScript console, you probably didn't notice much happen. In fact, you probably saw undefined returned back to you. undefined is the default return value on the console when nothing is explicitly returned using the special return keyword.
// accepts no parameters! parentheses are empty
function sayHello() {
  var message = "Hello!"
  console.log(message);
}

Return statements
In the sayHello() function above, a value is printed to the console with console.log, but not explicitly returned with a return statement. You can write a return statement by using the return keyword followed by the expression or value that you want to return.

// declares the sayHello function
function sayHello() {
  var message = "Hello!"
  return message; // returns value instead of printing it
}

How to run a function
Now, to get your function to do something, you have to invoke or call the function using the function name, followed by parentheses with any arguments that are passed into it. Functions are like machines. You can build the machine, but it won't do anything unless you also turn it on. Here's how you would call the sayHello() function from before, and then use the return value to print to the console:

// declares the sayHello function
function sayHello() {
  var message = "Hello!"
  return message; // returns value instead of printing it
}

// function returns "Hello!" and console.log prints the return value
console.log(sayHello());
Prints: "Hello!"

Parameters vs. Arguments
At first, it can be a bit tricky to know when something is either a parameter or an argument. The key difference is in where they show up in the code. A parameter is always going to be a variable name and appears in the function declaration. On the other hand, an argument is always going to be a value (i.e. any of the JavaScript data types - a number, a string, a boolean, etc.) and will always appear in the code when the function is called or invoked.

syntax
function [functionName]([param[, param[, ... param]]]) {
   statements
}

functionName(arg, arg, ...,arg)

name
The function name. Can be omitted, in which case the function becomes known as an anonymous function.
param
The name of an argument to be passed to the function.
statements
The statements comprising the body of the function.

What you've learned so far:
Functions package up code so you can easily use (and reuse) a block of code. Parameters are variables that are used to store the data that's passed into a function for the function to use. Arguments are the actual data that's passed into a function when it is invoked:

// x and y are parameters in this function declaration
function add(x, y) {
  // function body
  var sum = x + y;
  return sum; // return statement
}

// 1 and 2 are passed into the function as arguments
var sum = add(1, 2);
The function body is enclosed inside curly brackets:

function add(x, y) {
  // function body!
}
Return statements explicitly make your function return a value:

return sum;
You invoke or call a function to have it do something:

add(1, 2);
Returns: 3

Directions:
Declare a function called laugh() that returns 
"hahahahahahahahahaha!". Print the value returned from the laugh() function to the console.

function laugh() {
    var laughed = "hahahahhah";
    return laughed;
}

console.log(laugh());

Directions:
Write a function called laugh() that takes one parameter, num that represents the number of "ha"s to return.

TIP: You might need a loop to solve this!

Here's an example of the output and how to call the function that you will write:

console.log(laugh(3));
Prints: "hahaha!"

function multiLaugh(num){
    var ha = "";
    for (var i = 0; i < num ; i++) {
        ha += "ha"
    }
    return ha;
}

console.log(multiLaugh(3));